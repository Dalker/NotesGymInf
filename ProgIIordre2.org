#+TITLE: Résumé d'ordre 2 de Prog II
#+AUTHOR: Dalker (daniel.kessler@dalker.org)
#+OPTIONS: toc:t

* paradigmes
  - *procédural*: manipuler sructures de donnée, emphase sur logique correcte et
    efficace
  - *POO*: modéliser un processus, emphase sur définition d’entités et leurs
    relations; la logique fait directement partie des entités
  - *fonctionnel*: fonctions "pures", simples, composables et manipulables
    dynamiquement; permet code concis, fiable et proche d’une approche math
* bonnes habitudes
  - *DRY* (Don't Repeat Yourself): un bug ne devrait nécessiter de correction
    qu’en un seul lieu; pas de “copier/coller”; l’héritage peut aider à éviter
    la duplication de code
  - *divide and conquer*: diviser en parties bien définies pouvant êtres
    construites et analysées séparément (modularisation)
  - *programmation défensive*: prévoir problèmes liés à l'environnement ou la
    gestion de fichiers
  - *abstraction*: se placer à "haut niveau" et ignorer les détails
* paradigme "orienté objet"
  - metaclasse, classe, instance ("fabrique, moule, objet"); la classe
    *factorise* des caractéristiques (états) et tâches (comportements) communs
  - *état*: valeurs (propres à l'instance) dans *champs* (communs à la classe)
    [J: champ = P: attribut]
  - *comportement*: méthotes d'instance, de classe (P:@classmethod, J:static),
    statiques (P:@staticmethod)
  - *proxys* (P) self, super(), (J) this, super
  - *constructeur*: (J) MaClasse(), P() __init__(self)
  - *meta-constructeur*: (P) __new__(), méthode de classe (sans décorateur @classmethod)
  - *encapsulation* visible (public) vs interne (J:protected, P:_foo et J:private, P:__bar)
  - *getters* (accesseurs) (J:getFoo(), P:@property def foo():) et *setters*
    (J:setBar(type param), P:@foo.setter def foo(param):)
  - *héritage* avec *principe de substitution de Liskov* (instance de classe
    fille peut être utilisée partout où objet de classe mère est attendue =>
    respecter interface /sauf/ pour constructeur)
  - *surcharge* (overload) de méthode par dessus la méthode mère avec même
    interface (invoquer P:super().foo(), J:super.foo() si pertinent) et
    possiblement aussi autres interfaces (J:défintion séparée, P:*args,
    **kwargs, assurer que l'interface précédente reste valable pour Liskov)
  - une *classe abstraite* n'est pas instantiable mais on peut en hériter (elle
    aura au moins une *méthode abstraite*)
  - une *interface* (J) est une pseudo-classe "vide" ne définissant que des
    signatures de méthodes statiques et publiques (sans mots-clés static
    public); elles sont disponibles pour héritage multiple en Java (P:
    collections.abc.* jouent un peu ce rôle en vérifiant/complétant les
    "protocoles" de fonctions spéciales)
* design patterns
  - *composition*: ajouter à une classe des méthodes d'autres classes et/ou
    stocker des données dans une instance d'une autre classe
  - *mixin* (*adapteur*): héritage multiple (P) d'une classe FooMixin donnant
    accès à une classe Foo sans l'exposer directement ni poluer la classe fille

* trucs Python
  - *and* et *or* sont des /opérateurs court-circuit/ (évaluation seulement
    autant que nécessaire)
  - la *fluent interface* bli.bla().blo() n'est possible que pour les
    immuables (dont les méthodes retournent une nouvelle instance), tandis que
    les méthodes modifiant un muable retournent /None/
  - *else* après une boucle (while ou for) s'exécute après une terminaison
    normale (sans break)
  - * sert d'*unpacking operator* pour détupler une séquence, et ** un mapping
  - args de fonction obligatoirement positionnels, /, normaux, *,
    obligatoirement by keyword
  - les variables définies dans les boucles parasitent le scope, mais pas
    celles définies dans une compréhension
  - les blocs de définition sont du code qui s'exécute, l'ordre est important
* Python "bas-niveau"
  - examiner objet: isinstance(obj, cls), issubclass(fille, parent),
    hasattr(obj, "nom")
  - *introspection* du contexte: dicts globals(), locals() et list dir()
  - un *descripteur* est cherché dans dict d'instance, puis dict de classe, puis
    dict de super-classe
  - mémoire: id(obj), sys.getsizeof(obj)
* Protocoles en Python
  - *représentation* (pour str() et repr()): __repr__(), __str__()
  - *numérique* (pour +, *, ..., +=, ...): __add__(), __mul__(),... ,
    __radd__(), ..., __iadd__(), ...
    + unaires: __neg__() (-), __pos__() (+), __invert__() (~), __abs__(),
      __int__(), __float__(), __complex__(), __bool__() [fallsback to len]
    return *NotImplemented* quand calcul pas possible (auto-lever *TypeError*)
  - *comparaison* (pour ==, <, ...): __eq__(), __lt__() + *@functools.total_ordering*
    return *NotImplemented* quand comparaison pas possible (auto-lèver *TypeError*)
  - *itérable* (pour for):  __iter__(), [__reversed__()] => *itérateur*: __next__()
    l'itérateur peut être self, __next__() doit raise *StopIteration* pour terminer
  - *container* (pour in, len, [.]): __len__(), __getitem__(), __setitem__(),
    __delitem__(), __missing__(), __contains__()
    raise *IndexError* (séquences) ou *KeyError* (mappings) depuis les __*item__()
  - *appel de fonction* (..()): __call__()
  - *context manager* (with): __enter__(), __exit__()
  - *collections.abc.Protocol*
    (https://docs.python.org/3/library/collections.abc.html) vérifient si
    minimum présent et complètent les protocoles
* programmation fonctionnelle (P)
  - le fonctions sont *de 1è classe*, manipulables comme des données,
    dynamiquement
  - (P) une fonction peut se voir attribuer des *attributs*
  - une fonction est d'*ordre supérieur* si elle reçoit en arguement ou retourne
    une fonction (ex (P): sorted(seq, key=fun))
  - *metaprogrammation*: code manipule code
  - une fonction est *pure* si elle est *déterministe*, *sans état interne* et
    *sans effets de bord*
  - une fonction peut être *anonyme* ((P): lambda)
  - en style fonctionnel, on privilégie l'immuabilité des données, la récursion
    (plutôt que les boucles), la composition de fonctions pures et simples
    (faciles à unit-tester), les expressions (plutôt que les déclarations);
    l'immuabilité est notamment utile en exécutrion *concurrente*
    (*multi-thread*) afin d'éviter le recours aux *locks*, mais l'immuabilité et
    la récursivité ont des coûts (cpu et mem)
  - fonctions 1è classe principales: *map*(f, it), *filter*(f, it),
    *functools.reduce*(f, it, init=0)
  - "reduce" pré-existants: any(it), all(it)
  - map/filter en *compréhension*: [... for ... in ... if ...] (!ordre
    important!)
  - *curryification*: f(x, y) <-> g(x)(y), donc passage vers ou d'une
    *application partielle*
** itérateurs (P)
  - *itérateur* = fonction/objet qui garde un "état caché" et renvoie l'élément
    suivant /next(it)/ ou raise *StopIteration* quand il est invoqué. Malgré
    l'état interne, la séquence complète est bien déterministe.
  - flux / *stream* = itérateur infini; ils peuvent être manipulés par map(),
    filter(), zip() et enumerate()
  - sorted() et reversed() ne peuvent manipuler que des itérateurs finis
  - un *itérable* a une méthode __init__() qui retourne un itérateur,
    possiblement lui-même (s'il a une méthode __next__())
  - *itertools* fourit entre autres: cycle(it), repeat(obj), count(init=0,
    step=1), compress(seq, truths), chain(seq1, ...), dropwhile(fun, seq),
    zip_longest(seq1, ..., fillvalue=None), product(seq1, seq2),
    permutations(it, length=None), combinations(it, length)
   - iter(itérable), reverse(itérable), enumerate(itérable), zip(itérable,...) -> itérateurs
   - next(itérateur) -> objet ou raise StopIteration
** générateurs (P)
  - *expression génératrice* (... for ... in ... [if ....]) -> produit un générateur
  - *fonction génératrice*: fonction avec des yield au lieu d'un return ->
    retourne un générateur
  - un *générateur* définit __iter__() et __next__(); il sert à construire un
    itérateur avec iter(gen); il renvoie des données à la demande (*lazy*), très
    utile pour *coroutines* de type producteur/consommateur
** nested functions et closure
  - une fonction définie dans le corps d'une autre peut accéder au contexte
    supérieur avec *nonlocal* (entre local et global)
    NB: global permet aussi de créer une nouvelle variable, nonlocal pas
  - une *closure* est une fonction avec accès à un contexte personnel caché,
    produite comme valeur de retour d'une autre fonction, dont elle garede une
    copie du contexte à l'état au moment du retour
  - une closure peut aussi être obtenue en retournant un *lambda*
** décorateurs
  - c'est une
  - décorateur = fonction recevant une fonction et retournant une fonction (la
    fonction "décorée") *ou* recevant et retournant une classe
  - *args et **kwargs peuvent être utiles pour compatibilité d'appels entre
    fonction d'origine et fonciton décorée
  - encapsulation d'une fonction d'origine, généralement "pure" ou à laquelle on
    n'a pas accès directement 
** ce qui manque: prog concurrente et coroutines
* Java
** particularités / différences avec Python
   - this / super au lieu de self / super()
   - types primitifs: char/byte/int/long, float/double, boolean, null
   - les champs non primitifs sont en fait des pointeurs, vers un objet déjà
     existant ou un nouvel objet créé avec *new*; si non initialisé, leur valeur
     est *null* (/i.e./ null pointer)
   - la portée (scope) est le bloc {...}, donc for, if, etc. ont leur propre
     scope
   - une *expression* est une valeur typée, donc si le résultat est *void*, ce
     n'est pas une expression (dans Python, pas de void, c'est au moins None)
   - pas de répétition str*int
   - &&, ||, ! au lieu de and, or, not
   - on peut concaténer str + int ou str + float directement
   - structures principales: if(){}, for(;;){}, while(){}, do{}while(), switch(){case:...}
   - *surcharge* de méthode avec nouvelle signature et nouveau corps (au lieu de
     gérer des *args / **kwargs)
   - *this()* appelle un constructeur depuis un autre, mais uniquement en 1è
     ligne
   - javadoc /** ... */* avec @author / @version ou @param / @return; seulement
     ce qui est public sera extrait par javadoc
** classes simples pré-existantes utiles
   - les classes de java.lang sont disponibles sans import (cf. les 4 qui suivent)
   - *String* avec méthodes .trim(), .toLowerCase(), .startsWith(), ...
   - *Integer*, ...
   - *Math* fournit des constantes et méthodes statiques, telles *.pow(a, b)*, *.PI*, *.abs()*,
     *.cos()*, ...
   - *System* fournit *.in* et *.out*, lequel a les méthodes *.print()* et *.println()*
   - *java.util.Scanner* permet de lire la console, de manière assez encombrante:
     import java.util.Scanner; Scanner stdin = new Scanner(System.in);
     stdin.nextLine(); (ou stdin.nextInt(), etc.)
   - *java.util.Random* doit être instantiée puis donne accès à *.nextInt(n)*, ...
** méthodes spéciales héritées de Object
   - boolean equals (MaClasse autreObjet) pour comparer contenus (vs. == pour
     comparer espace mémoire, /i.e./ == java est comme /is/ de Python)
   - String toString() équivaut à __str__()
** collections
   - tableaux (arrays): *Type[] tab; tab = new Type[n]* ou 
     *Type[] tab = {obj1, obj2, ...}*, avec notation [.], possible aussi en
     multi-dimensionnel [m][n] et champ *.length*
   - import java.util.Arrays permet Array.asList(arr) qui aura .contains(), etc.
   - *java.util.ArrayList* permet ArrayList<Type> avec méthodes .add(obj), .get(n),
     .size() et .remove(n)
   - itérable implicite avec *for(Type obj : collection)* ou bien explicite avec
     *it = collection.iterator()* qui donne un *Iterator<Type>* avec
     *.hasNext()*
   - *java.util.HashMap<KeyType, ValueType>* avec .put(k, v), .get(k)
   - *java.util.HashSet<Type>*
** héritage/polymorphisme
   - toutes les classes dérivent de *Object*
   - class Bla extends Bli, uniquement héritage simple
   - dans constructeur, *super()* est appellé automatiquement au début
   - *polymorphisme* SuperClasse nomVar; nomVar = new SousClase(); (type déclaré
     = "type statique", type instantié = "type dynamique"); choix de méthode
     part du type dynamique puis remonte si nécessaire la chaîne d'héritage
   - *transtypage* = type cast:  (Type) bla, force transformation de type pour
     /e.g./ retrouver type perdu par polymorphisme; obj *instanceof* Class est
     utile avant un cast (c'est un opérateur!)
   - une classe *abstract* est une classe incomplète, non instantiable, qui peut
     avoir des méthodes *abstract* (doivent être surchargées)
   - une *interface* est une "classe purement abstraite"; une class *implements*
     (au lieu de extends) une interface et peut en implémenter plusieurs; toutes
     ses méthodes sont autommatiquement et obligatoirement abstraites et
     publiques; pas de constructeur; les champs éventuels sont publics,
     statiques et finaux (i.e. constantes, pas état); le polymorphisme permet de
     déclarer un objet avec une interface
** exceptions
   - throw / catch au lieu de try / except
   - sous-classes de Exception (anticipables, récupérables) ou RuntimeException
     (imprévisibles, souvent pas récupérables)
** pour aller plus loin
   - autres classes:  https://docs.oracle.com/en/java/javase/14/docs/api/java.base/java/lang/Object.html

